{"version":3,"file":"static/js/44.052ab933.chunk.js","mappings":"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","sources":["sections/auth/reset-password/ResetPasswordForm.js","pages/auth/ResetPassword.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport * as Yup from 'yup';\n// form\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n// @mui\nimport { Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// components\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func,\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(ResetPasswordSchema),\n    defaultValues: { email: 'info@telyzagame.com' },\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      if (isMountedRef.current) {\n        onSent();\n        onGetEmail(data.email);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        <RHFTextField name=\"email\" label=\"Email address\" />\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Reset Password\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\n// sections\nimport { ResetPasswordForm } from '../../sections/auth/reset-password';\n// assets\nimport { SentIcon } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <Page title=\"Reset Password\" sx={{ height: 1 }}>\n      <RootStyle>\n        <LogoOnlyLayout />\n\n        <Container>\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n            {!sent ? (\n              <>\n                <Typography variant=\"h3\" paragraph>\n                  Forgot your password?\n                </Typography>\n                <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                  Please enter the email address associated with your account and We will email you a link to reset your\n                  password.\n                </Typography>\n\n                <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\n\n                <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\n                  Back\n                </Button>\n              </>\n            ) : (\n              <Box sx={{ textAlign: 'center' }}>\n                <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n                <Typography variant=\"h3\" gutterBottom>\n                  Request sent successfully\n                </Typography>\n                <Typography>\n                  We have sent a confirmation email to &nbsp;\n                  <strong>{email}</strong>\n                  <br />\n                  Please check your email.\n                </Typography>\n\n                <Button size=\"large\" variant=\"contained\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 5 }}>\n                  Back\n                </Button>\n              </Box>\n            )}\n          </Box>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"names":["ResetPasswordForm","_ref","onSent","onGetEmail","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","handleSubmit","formState","isSubmitting","_jsx","FormProvider","onSubmit","async","Promise","resolve","setTimeout","current","data","error","console","children","_jsxs","Stack","spacing","RHFTextField","name","label","LoadingButton","fullWidth","size","type","variant","loading","RootStyle","styled","theme","display","minHeight","alignItems","justifyContent","padding","ResetPassword","setEmail","useState","sent","setSent","Page","title","sx","height","LogoOnlyLayout","Container","Box","maxWidth","mx","textAlign","SentIcon","mb","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","login","mt","_Fragment","paragraph","color","value"],"sourceRoot":""}